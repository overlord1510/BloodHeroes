package com.team10.services;

import java.util.UUID;

import org.springframework.http.ResponseCookie;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.team10.config.JwtUtils;
import com.team10.dto.AuthenticationRequest;
import com.team10.dto.AuthenticationResponse;
import com.team10.entity.User;

import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class AuthenticationServiceImpl implements IAuthenticationService {

	private final AuthenticationManager authenticationManager;
	private final IUserService iUserService;
	private final JwtUtils jwtUtils;

	@Override
	public AuthenticationResponse authenticateAndCreateCookie(AuthenticationRequest request,
			HttpServletResponse response) {
		log.info("Inside Auth Service"+request.getEmail());
		Authentication authentication = authenticationManager
				.authenticate(new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));
		log.info("auth success");
		if (authentication.isAuthenticated()) {
			User userByEmail = iUserService.getUserByEmail(request.getEmail());
			System.out.println(userByEmail);
			String token = jwtUtils.generateToken(userByEmail);
			System.out.println("Token : " + token);
			//@formatter:off
			
			String refreshToken = UUID.randomUUID().toString();
			
			
			return AuthenticationResponse
					.builder()
						.email(request.getEmail())
						.token(token)
						.role(userByEmail.getRole().toString())
					.build();
			//@formatter:on
		}
		return null;
	}

}
